<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dialects on CIRCT</title><link>https://circt.llvm.org/docs/Dialects/</link><description>Recent content in Dialects on CIRCT</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Jan 1970 00:00:00 +0000</lastBuildDate><atom:link href="https://circt.llvm.org/docs/Dialects/index.xml" rel="self" type="application/rss+xml"/><item><title>'arc' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Arc/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Arc/</guid><description>Canonical representation of state transfer in a circuit This is the arc dialect, useful for representing state transfer functions in a circuit.
Operation definition arc.alloc_memory (circt::arc::AllocMemoryOp) arc.alloc_state (circt::arc::AllocStateOp) arc.alloc_storage (circt::arc::AllocStorageOp) arc.call (circt::arc::CallOp) arc.clock_domain (circt::arc::ClockDomainOp) arc.clock_gate (circt::arc::ClockGateOp) arc.clock_tree (circt::arc::ClockTreeOp) arc.define (circt::arc::DefineOp) arc.lut (circt::arc::LutOp) arc.memory (circt::arc::MemoryOp) arc.memory_read (circt::arc::MemoryReadOp) arc.memory_read_port (circt::arc::MemoryReadPortOp) arc.memory_write (circt::arc::MemoryWriteOp) arc.memory_write_port (circt::arc::MemoryWritePortOp) arc.model (circt::arc::ModelOp) arc.output (circt::arc::OutputOp) arc.passthrough (circt::arc::PassThroughOp) arc.root_input (circt::arc::RootInputOp) arc.root_output (circt::arc::RootOutputOp) arc.state (circt::arc::StateOp) arc.state_read (circt::arc::StateReadOp) arc.state_write (circt::arc::StateWriteOp) arc.storage.get (circt::arc::StorageGetOp) arc.</description></item><item><title>'calyx' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Calyx/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Calyx/</guid><description>Types and operations for the Calyx dialect Calyx is an intermediate language and infrastructure for building compilers that generate custom hardware accelerators. For more information, visit the documentation.
Operation definition calyx.assign (::circt::calyx::AssignOp) calyx.comb_component (::circt::calyx::CombComponentOp) calyx.comb_group (::circt::calyx::CombGroupOp) calyx.component (::circt::calyx::ComponentOp) calyx.control (::circt::calyx::ControlOp) calyx.cycle (::circt::calyx::CycleOp) calyx.enable (::circt::calyx::EnableOp) calyx.group (::circt::calyx::GroupOp) calyx.group_done (::circt::calyx::GroupDoneOp) calyx.group_go (::circt::calyx::GroupGoOp) calyx.if (::circt::calyx::IfOp) calyx.instance (::circt::calyx::InstanceOp) calyx.invoke (::circt::calyx::InvokeOp) calyx.memory (::circt::calyx::MemoryOp) calyx.par (::circt::calyx::ParOp) calyx.primitive (::circt::calyx::PrimitiveOp) calyx.register (::circt::calyx::RegisterOp) calyx.repeat (::circt::calyx::RepeatOp) calyx.seq (::circt::calyx::SeqOp) calyx.seq_mem (::circt::calyx::SeqMemoryOp) calyx.</description></item><item><title>'chirrtl' Dialect</title><link>https://circt.llvm.org/docs/Dialects/CHIRRTL/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/CHIRRTL/</guid><description>Types and operations for the chirrtl dialect This dialect defines the chirrtl dialect, which contains high-level memory defintions which can be lowered to FIRRTL.
Operation definition chirrtl.combmem (::circt::chirrtl::CombMemOp) chirrtl.debugport (::circt::chirrtl::MemoryDebugPortOp) chirrtl.memoryport (::circt::chirrtl::MemoryPortOp) chirrtl.memoryport.access (::circt::chirrtl::MemoryPortAccessOp) chirrtl.seqmem (::circt::chirrtl::SeqMemOp) Type definition CMemoryPortType CMemoryType Operation definition chirrtl.combmem (::circt::chirrtl::CombMemOp) Define a new combinational memory
Syntax:
operation ::= `chirrtl.combmem` (`sym` $inner_sym^)? `` custom&amp;lt;NameKind&amp;gt;($nameKind) `` custom&amp;lt;CombMemOp&amp;gt;(attr-dict) `:` qualified(type($result)) Define a new behavioral combinational memory. Combinational memories have a write latency of 1 and a read latency of 0.</description></item><item><title>'ibis' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Ibis/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Ibis/</guid><description>Types and operations for Ibis dialect The ibis dialect is intended to support porting and eventual open sourcing of an internal hardware development language.
Operation definition ibis.call (::circt::ibis::CallOp) ibis.class (::circt::ibis::ClassOp) ibis.instance (::circt::ibis::InstanceOp) ibis.method (::circt::ibis::MethodOp) ibis.return (::circt::ibis::ReturnOp) Operation definition ibis.call (::circt::ibis::CallOp) Ibis method call
Syntax:
operation ::= `ibis.call` $callee `(` $operands `)` attr-dict `:` functional-type($operands, results) Dispatch a call to an Ibis method.
Interfaces: CallOpInterface
Attributes: Attribute MLIR Type Description callee ::mlir::SymbolRefAttr symbol reference attribute Operands: Operand Description operands any type Results: Result Description «unnamed» any type ibis.</description></item><item><title>'llhd' Dialect</title><link>https://circt.llvm.org/docs/Dialects/LLHD/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/LLHD/</guid><description>A low-level hardware description dialect in MLIR.
Operation definition llhd.con (::circt::llhd::ConnectOp) llhd.constant_time (::circt::llhd::ConstantTimeOp) llhd.drv (::circt::llhd::DrvOp) llhd.entity (::circt::llhd::EntityOp) llhd.halt (::circt::llhd::HaltOp) llhd.inst (::circt::llhd::InstOp) llhd.load (::circt::llhd::LoadOp) llhd.output (::circt::llhd::OutputOp) llhd.prb (::circt::llhd::PrbOp) llhd.proc (::circt::llhd::ProcOp) llhd.ptr.array_get (::circt::llhd::PtrArrayGetOp) llhd.ptr.array_slice (::circt::llhd::PtrArraySliceOp) llhd.ptr.extract (::circt::llhd::PtrExtractOp) llhd.ptr.struct_extract (::circt::llhd::PtrStructExtractOp) llhd.reg (::circt::llhd::RegOp) llhd.sig (::circt::llhd::SigOp) llhd.sig.array_get (::circt::llhd::SigArrayGetOp) llhd.sig.array_slice (::circt::llhd::SigArraySliceOp) llhd.sig.extract (::circt::llhd::SigExtractOp) llhd.sig.struct_extract (::circt::llhd::SigStructExtractOp) llhd.store (::circt::llhd::StoreOp) llhd.var (::circt::llhd::VarOp) llhd.wait (::circt::llhd::WaitOp) Attribute definition TimeAttr Type constraint definition LLHD time type Type definition PtrType SigType TimeType Operation definition llhd.</description></item><item><title>'ltl' Dialect</title><link>https://circt.llvm.org/docs/Dialects/LTL/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/LTL/</guid><description>This dialect provides operations and types to model Linear Temporal Logic, sequences, and properties, which are useful for hardware verification.
Rationale Sequences and Properties Representing SVAs Sequence Concatenation and Cycle Delay Implication Clocking Disable Iff Representing the LTL Formalism Next / Delay Concatenation Types Overview PropertyType SequenceType Operations ltl.and (circt::ltl::AndOp) ltl.clock (circt::ltl::ClockOp) ltl.concat (circt::ltl::ConcatOp) ltl.delay (circt::ltl::DelayOp) ltl.disable (circt::ltl::DisableOp) ltl.eventually (circt::ltl::EventuallyOp) ltl.implication (circt::ltl::ImplicationOp) ltl.not (circt::ltl::NotOp) ltl.or (circt::ltl::OrOp) Rationale The main goal of the ltl dialect is to capture the core formalism underpinning SystemVerilog Assertions (SVAs), the de facto standard for describing temporal logic sequences and properties in hardware verification.</description></item><item><title>'moore' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Moore/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Moore/</guid><description>Types and operations for Moore dialect This dialect defines the moore dialect, which represents various SystemVerilog-specific constructs without ambiguities and all types resolved.
Operation definition moore.mir.assign (::circt::moore::AssignOp) moore.mir.concat (::circt::moore::ConcatOp) moore.mir.constant (::circt::moore::ConstantOp) moore.mir.shl (::circt::moore::ShlOp) moore.mir.shr (::circt::moore::ShrOp) moore.mir.vardecl (::circt::moore::VariableDeclOp) Type constraint definition an SystemVerilog int packed type simple bit vector type unpacked type Type definition LValueType Operation definition moore.mir.assign (::circt::moore::AssignOp) Continuous assignment
Syntax:
operation ::= `moore.mir.assign` $dest `,` $src attr-dict `:` qualified(type($src)) A SystemVerilog assignment statement &amp;lsquo;x = y;&amp;rsquo;.</description></item><item><title>'msft' Dialect</title><link>https://circt.llvm.org/docs/Dialects/MSFT/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/MSFT/</guid><description>Microsoft internal support dialect Umbrella dialect for everything needed to support Microsoft development but not thoroughly discussed. Most (if not everything) in this dialect is a candidate for generalization and re-homing.
Operation definition msft.constructs.channel (::circt::msft::ChannelOp) msft.entity.extern (::circt::msft::EntityExternOp) msft.hlc.linear (::circt::msft::LinearOp) msft.instance (::circt::msft::InstanceOp) msft.instance.dynamic (::circt::msft::DynamicInstanceOp) msft.instance.hierarchy (::circt::msft::InstanceHierarchyOp) msft.instance.verb_attr (::circt::msft::DynamicInstanceVerbatimAttrOp) msft.module (::circt::msft::MSFTModuleOp) msft.module.extern (::circt::msft::MSFTModuleExternOp) msft.output (::circt::msft::OutputOp) msft.partition (::circt::msft::DesignPartitionOp) msft.pd.location (::circt::msft::PDPhysLocationOp) msft.pd.physregion (::circt::msft::PDPhysRegionOp) msft.pd.reg_location (::circt::msft::PDRegPhysLocationOp) msft.pe.output (::circt::msft::PEOutputOp) msft.physical_region (::circt::msft::DeclPhysicalRegionOp) msft.systolic.array (::circt::msft::SystolicArrayOp) Attribute definition AppIDAttr LocationVectorAttr PhysLocationAttr PhysicalBoundsAttr Operation definition msft.</description></item><item><title>'verif' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Verif/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Verif/</guid><description>This dialect provides a collection of operations to express various verification concerns, such as assertions and interacting with a piece of hardware for the sake of verifying its proper functioning.
Operations verif.assert (circt::verif::AssertOp) verif.assume (circt::verif::AssumeOp) verif.cover (circt::verif::CoverOp) verif.format_verilog_string (circt::verif::FormatVerilogStringOp) verif.print (circt::verif::PrintOp) Operations verif.assert (circt::verif::AssertOp) Assert that a property holds.
Syntax:
operation ::= `verif.assert` $property (`label` $label^)? attr-dict `:` type($property) Attributes: Attribute MLIR Type Description label ::mlir::StringAttr string attribute Operands: Operand Description property 1-bit signless integer or LTL sequence type or LTL property type verif.</description></item></channel></rss>